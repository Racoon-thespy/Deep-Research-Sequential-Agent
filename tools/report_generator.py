"""
Tool: Report Generator
Generates markdown reports from agent outputs (datasets, web findings, insights).
"""

from datetime import datetime
from typing import List, Dict, Optional
from utils.logger import get_logger
from utils.file_manager import FileManager
from config.settings import REPORTS_DIR

logger = get_logger(__name__)
file_manager = FileManager()

class ReportGeneratorTool:
    """
    Tool for generating and saving structured markdown reports.
    """

    def __init__(self):
        self.title = "Market Research Report"

    def run(
        self,
        topic: str,
        datasets: Optional[List[Dict]] = None,
        web_findings: Optional[List[Dict]] = None,
        insights: Optional[List[str]] = None,
        save: bool = True,
        add_timestamp: bool = True,
    ) -> str:
        """
        Generate a markdown report and optionally save it.

        Args:
            topic (str): Research topic.
            datasets (Optional[List[Dict]]): Dataset metadata.
            web_findings (Optional[List[Dict]]): Web scraping results.
            insights (Optional[List[str]]): AI-generated insights.
            save (bool): Whether to save the report.
            add_timestamp (bool): Whether to append timestamp to filename.

        Returns:
            str: Markdown report text.
        """
        report_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        md_lines = [
            f"# {self.title}",
            f"**Date:** {report_date}",
            f"**Topic:** {topic}",
            "\n---\n",
        ]

        if datasets:
            md_lines.append("## 📊 Relevant Datasets")
            for ds in datasets:
                md_lines.append(f"- **{ds.get('title', 'Untitled')}**")
                if ds.get("source"):
                    md_lines.append(f"  - Source: {ds['source']}")
                if ds.get("url"):
                    md_lines.append(f"  - [Link]({ds['url']})")
                if ds.get("description"):
                    md_lines.append(f"  - Description: {ds['description']}")
                md_lines.append("")

        if web_findings:
            md_lines.append("## 🌐 Web Findings")
            for wf in web_findings:
                title = wf.get("title", "Untitled Result")
                url = wf.get("url", "#")
                snippet = wf.get("snippet", "")
                md_lines.append(f"- **[{title}]({url})**\n  - {snippet}")

        if insights:
            md_lines.append("\n## 💡 Insights & Recommendations")
            for i, insight in enumerate(insights, 1):
                md_lines.append(f"{i}. {insight}")

        md_lines.append("\n---\n_Report generated by Market Research System_")
        report_content = "\n".join(md_lines)

        if save:
            report_path = REPORTS_DIR / f"{topic.replace(' ', '_')}.md"
            file_manager.save_markdown(report_content, report_path, add_timestamp=add_timestamp)

        return report_content


# Expose as a ready-to-use tool
report_generator_tool = ReportGeneratorTool()
